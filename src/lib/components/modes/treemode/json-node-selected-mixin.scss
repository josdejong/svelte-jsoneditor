@import '../../../styles';

// TODO: simplify the CSS needed to correctly highlight the selection

@mixin json-node-selected-mixin($selection-background, $insert-area-background) {
  // entry selected
  &.selected {
    .header,
    .contents,
    .meta,
    .expand,
    .footer,
    :global(.key),
    :global(.value) {
      background-color: $selection-background !important;
      cursor: grab;
    }

    .expand {
      cursor: pointer;
    }
  }

  // key selected
  &.selected-key {
    > .contents-outer > .contents > :global(.identifier) > :global(.key),
    > .header-outer > .header > :global(.identifier) > :global(.key) {
      background-color: $selection-background;
      cursor: grab;
    }
  }

  // value selected (part 1)
  &.selected-value > .contents-outer > .contents > :global(.value) {
    background-color: $selection-background;
    cursor: grab;
  }

  :global(.collapsed-items.selected),
  &.selected :global(.collapsed-items),
  &.selected-value :global(.collapsed-items) {
    // TODO: this css is copied from CollapsedItems.scss. Figure out how to reuse this smartly with CSS or SASS
    background-color: $selection-background;
    cursor: grab;

    $shape-color: darken($selection-background, 5%);
    background-image: linear-gradient($shape-color, $shape-color),
      linear-gradient(to bottom right, transparent 50.5%, $shape-color 50.5%),
      linear-gradient(to bottom left, transparent 50.5%, $shape-color 50.5%),
      linear-gradient(to top right, transparent 50.5%, $shape-color 50.5%),
      linear-gradient(to top left, transparent 50.5%, $shape-color 50.5%);
  }

  // value selected (part 2)
  &.selected-value {
    .meta,
    > .footer-outer > .footer,
    .props .contents,
    .props .header,
    .props .footer,
    .props .expand,
    .items .contents,
    .items .header,
    .items .footer,
    .items .expand {
      background-color: $selection-background !important;

      :global(.key),
      :global(.value) {
        background-color: $selection-background !important;
        cursor: grab;
      }
    }
  }

  .insert-area {
    &.selected {
      display: flex;
      z-index: 2;
      outline-color: $insert-area-background;
    }
  }

  .insert-area {
    &.selected {
      :global(.context-menu-button) {
        background: $insert-area-background;
      }
    }
  }

  .context-menu-button-anchor {
    :global(.context-menu-button) {
      background: $insert-area-background;
    }
  }
}
